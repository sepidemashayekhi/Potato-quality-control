# -*- coding: utf-8 -*-
"""VGG 16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SsE8yDNxZ8Zr_QKOcMidWbxXwNdWIBdL
"""

import tensorflow as tf 
from tensorflow import keras

"""# creat model 

"""

class Inception_module(keras.Model):
  def __init__(self,filters1_1,filters3_3_reduce,filters3_3,filters5_5_reduce,
               filter5_5,filters_pool_proj):
    super(Inception_module,self).__init__()
    self.conv1x1=keras.layers.Conv2D(filters1_1,(1,1),padding='same',activation='relu')
    self.per_conv3x3=keras.layers.Conv2D(filters3_3_reduce,(1,1),padding='same',activation='relu')
    self.conv3x3=keras.layers.Conv2D(filters3_3,(3,3),padding='same',activation='relu')
    self.per_conv5x5=keras.layers.Conv2D(filters5_5_reduce,(1,1),padding='same',activation='relu')
    self.conv5x5=keras.layers.Conv2D(filter5_5,(5,5),padding='same',activation='relu')
    self.pool_proj1=keras.layers.MaxPool2D((3,3),strides=(1,1),padding='same')
    self.pool_proj2=keras.layers.Conv2D(filters_pool_proj,(1,1),padding='same',activation='relu')
 
  def call(self,input_tensor):
    x1=self.conv1x1(input_tensor)
    x2=self.per_conv3x3(input_tensor)
    x2=self.conv3x3(x2)
    x3=self.per_conv5x5(input_tensor)
    x3=self.conv5x5(x3)
    x4=self.pool_proj1(input_tensor)
    x4=self.pool_proj2(x4)
    output=keras.layers.concatenate([x1,x2,x3,x4],axis=3)

    return output

#  creat_model

class ModelSubClassing(keras.Model):
  def __init__(self):
    super(ModelSubClassing, self).__init__()
    self.conv7x7=keras.layers.Conv2D(64,(7,7),padding='same',activation='relu')
    self.pooling1=keras.layers.MaxPool2D((3,3))
    self.conv1x1=keras.layers.Conv2D(128,(1,1),padding='same',activation='relu')
    self.conv3x3=keras.layers.Conv2D(128,(3,3),padding='same',activation='relu')
    self.pooling2=keras.layers.AveragePooling2D((3,3))
    
    self.inception_A=Inception_module(64,96,128,32,96,64)
    self.incepyion_B=Inception_module(128,128,192,32,96,64)
    self.incepyion_C=Inception_module(128,128,192,32,96,64)


    self.flatten=keras.layers.Flatten()
    self.dense1=keras.layers.Dense(128,activation='relu')
    self.dense2=keras.layers.Dense(64,activation='relu')
    self.dense3=keras.layers.Dense(32,activation='relu')
    self.dense4=keras.layers.Dense(1,activation='softmax')

  
  def call(self,input_tensor,training=True):
    x=self.conv7x7(input_tensor)
    x=self.pooling1(x)
    x=self.conv1x1(x)
    x=self.conv3x3(x)
    x=self.pooling1(x)
    x=self.inception_A(x)
    x=self.pooling1(x)
    x=self.inception_B(x)
    x=self.pooling1(x)
    x=self.incepyion_C(x)
    x=self.pooling2(x)
    x=self.flatten(x)
    x=self.dense1(x)
    x=self.dense2(x)
    x=self.dense3(x)
    x=self.dense4(x)

    return x

subModel=ModelSubClassing()

subModel.compile(
          loss      = keras.losses.binary_crossentropy,
          metrics   = keras.metrics.CategoricalAccuracy(),
          optimizer = keras.optimizers.Adam())

"""# load data"""

import os 
import numpy as np 
import matplotlib.pyplot as plt 
from keras.preprocessing.image import load_img,img_to_array
from keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split

trainData_path=os.path.join('/content/drive/MyDrive/data2','Train')
testData_path=os.path.join('/content/drive/MyDrive/data2','Test')

data=[]
labels=[]
label=0
for dir in os.listdir(trainData_path):
  for img in os.listdir(os.path.join(trainData_path,dir)):
    imagePath=os.path.join(trainData_path,dir,img)
    image=load_img(imagePath,target_size=(225,225,3))
    image=img_to_array(image)
    data.append(image)
    labels.append(label)
  label+=1

test=[]
labels_test=[]
label=0
for dir in os.listdir(testData_path):
  for img in os.listdir(os.path.join(testData_path,dir)):
    imagePath=os.path.join(testData_path,dir,img)
    image=load_img(imagePath,target_size=(225,225,3))
    image=img_to_array(image)
    test.append(image)
    labels_test.append(label)
  label+=1

data=np.array(data,dtype='float32')
labels=np.array(labels)

test=np.array(test,dtype='float32')
labels_test=np.array(labels_test)

datagen = ImageDataGenerator(rotation_range=20,zoom_range=0.15,
                             width_shift_range=0.2,
                             height_shift_range=0.2,
                             shear_range=0.15,
                             horizontal_flip=True,
                             fill_mode="nearest")

trainGenerator=datagen.flow(data, labels, batch_size=32)

validationGenetator=datagen.flow(test,labels_test,batch_size=32)

"""# fit model """

subModel.fit_generator(trainGenerator,steps_per_epoch=100,
                       validation_data=validationGenetator,validation_steps=50,epochs=15)